# Generated by Django 5.1.8 on 2025-06-02 13:18

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('questions', '0024_groupofquestions_description_zh_tw_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BinaryQuestionLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('edited_at', models.DateTimeField(editable=False, null=True)),
                ('bidirectional', models.BooleanField(default=False, help_text='Whether this relationship works in both directions')),
                ('link_type', models.CharField(blank=True, help_text="Type of relationship (e.g., 'causal', 'correlation', etc.)", max_length=50, null=True)),
                ('reasoning', models.TextField(blank=True, help_text="User's explanation for why these questions are linked")),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('invalid', 'Invalid')], default='active', max_length=10)),
                ('resolution_status', models.CharField(choices=[('pending', 'Pending'), ('resolved', 'Resolved')], default='pending', max_length=10)),
                ('forecast_status', models.CharField(choices=[('pending', 'Pending'), ('stale', 'Stale'), ('live', 'Live')], default='pending', max_length=10)),
                ('source_question', models.ForeignKey(help_text='The question that influences the target', on_delete=django.db.models.deletion.CASCADE, related_name='outgoing_links', to='questions.question')),
                ('target_question', models.ForeignKey(help_text='The question that is influenced by the source', on_delete=django.db.models.deletion.CASCADE, related_name='incoming_links', to='questions.question')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='question_links', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='CausalLink',
            fields=[
                ('binaryquestionlink_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='questions.binaryquestionlink')),
                ('direction', models.CharField(choices=[('positive', 'Positive'), ('negative', 'Negative')], help_text='Whether source positively or negatively affects target', max_length=10)),
                ('strength', models.CharField(choices=[('weak', 'Weak'), ('moderate', 'Moderate'), ('strong', 'Strong')], help_text='Strength of the causal relationship', max_length=10)),
            ],
            options={
                'constraints': [models.UniqueConstraint(fields=('user', 'source_question', 'target_question'), name='unique_user_causal_link'), models.CheckConstraint(condition=models.Q(('bidirectional', False)), name='causal_links_not_bidirectional'), models.CheckConstraint(condition=models.Q(('source_question', models.F('target_question')), _negated=True), name='causal_no_self_links')],
            },
            bases=('questions.binaryquestionlink',),
        ),
        migrations.AddIndex(
            model_name='binaryquestionlink',
            index=models.Index(fields=['user', 'source_question'], name='questions_b_user_id_2c842e_idx'),
        ),
        migrations.AddIndex(
            model_name='binaryquestionlink',
            index=models.Index(fields=['user', 'target_question'], name='questions_b_user_id_54f9cd_idx'),
        ),
        migrations.AddIndex(
            model_name='binaryquestionlink',
            index=models.Index(fields=['status'], name='questions_b_status_d58639_idx'),
        ),
        migrations.AddConstraint(
            model_name='binaryquestionlink',
            constraint=models.UniqueConstraint(fields=('user', 'source_question', 'target_question'), name='unique_user_binary_question_link'),
        ),
        migrations.AddConstraint(
            model_name='binaryquestionlink',
            constraint=models.CheckConstraint(condition=models.Q(('source_question', models.F('target_question')), _negated=True), name='no_self_links'),
        ),
    ]
