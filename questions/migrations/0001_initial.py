# Generated by Django 5.0.6 on 2024-07-01 18:45

import datetime
import django.contrib.postgres.fields
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="GroupOfQuestions",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("edited_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Question",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("edited_at", models.DateTimeField(auto_now=True)),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("binary", "Binary"),
                            ("numeric", "Numeric"),
                            ("date", "Date"),
                            ("multiple_choice", "Multiple Choice"),
                        ],
                        max_length=20,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                (
                    "forecasting_open_at",
                    models.DateTimeField(blank=True, db_index=True, null=True),
                ),
                (
                    "aim_to_close_at",
                    models.DateTimeField(
                        db_index=True,
                        default=datetime.datetime(
                            9999,
                            12,
                            31,
                            23,
                            59,
                            59,
                            999999,
                            tzinfo=datetime.timezone.utc,
                        ),
                    ),
                ),
                (
                    "aim_to_resolve_at",
                    models.DateTimeField(
                        db_index=True,
                        default=datetime.datetime(
                            9999,
                            12,
                            31,
                            23,
                            59,
                            59,
                            999999,
                            tzinfo=datetime.timezone.utc,
                        ),
                    ),
                ),
                (
                    "resolution_known_at",
                    models.DateTimeField(blank=True, db_index=True, null=True),
                ),
                (
                    "resolution_field_set_at",
                    models.DateTimeField(blank=True, db_index=True, null=True),
                ),
                (
                    "closed_at",
                    models.DateTimeField(blank=True, db_index=True, null=True),
                ),
                ("max", models.FloatField(blank=True, null=True)),
                ("min", models.FloatField(blank=True, null=True)),
                ("zero_point", models.FloatField(blank=True, null=True)),
                ("open_upper_bound", models.BooleanField(blank=True, null=True)),
                ("open_lower_bound", models.BooleanField(blank=True, null=True)),
                (
                    "options",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=200),
                        blank=True,
                        null=True,
                        size=None,
                    ),
                ),
                ("possibilities", models.JSONField(blank=True, null=True)),
                ("resolution", models.TextField(blank=True, null=True)),
                (
                    "forecast_scoring_ends",
                    models.DateTimeField(blank=True, db_index=True, null=True),
                ),
                (
                    "group",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="questions",
                        to="questions.groupofquestions",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Forecast",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "start_time",
                    models.DateTimeField(
                        db_index=True,
                        help_text="Begining time when this prediction is active",
                    ),
                ),
                (
                    "end_time",
                    models.DateTimeField(
                        db_index=True,
                        help_text="Time at which this prediction is no longer active",
                        null=True,
                    ),
                ),
                (
                    "continuous_cdf",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.FloatField(), null=True, size=201
                    ),
                ),
                ("probability_yes", models.FloatField(null=True)),
                (
                    "probability_yes_per_category",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.FloatField(), null=True, size=None
                    ),
                ),
                (
                    "distribution_components",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.JSONField(null=True),
                        help_text="The components for a continuous prediction. Used to generate prediction_values.",
                        null=True,
                        size=5,
                    ),
                ),
                ("slider_values", models.JSONField(null=True)),
                (
                    "author",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "question",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="questions.question",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Conditional",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("edited_at", models.DateTimeField(auto_now=True)),
                (
                    "condition",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="conditional_conditions",
                        to="questions.question",
                    ),
                ),
                (
                    "condition_child",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="conditional_children",
                        to="questions.question",
                    ),
                ),
                (
                    "question_no",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="conditional_no",
                        to="questions.question",
                    ),
                ),
                (
                    "question_yes",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="conditional_yes",
                        to="questions.question",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
    ]
