# Generated by Django 5.1.9 on 2025-08-22 14:36

import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


def migrate_index_data(apps, schema_editor):
    Project = apps.get_model("projects", "Project")
    ProjectIndex = apps.get_model("projects", "ProjectIndex")
    ProjectIndexQuestion = apps.get_model("projects", "ProjectIndexQuestion")

    # Delete index relations for non-index projects
    ProjectIndexQuestion.objects.exclude(project__type="index").delete()

    index_projects = Project.objects.filter(type="index")

    # Create index object for each project
    for project in index_projects:
        index = ProjectIndex.objects.create()
        project.index = index
        project.save()

        for project_index in project.index_questions.all():
            q = project_index.question
            project_index.post = getattr(q, "post", None) or getattr(
                q.group, "post", None
            )
            project_index.index = index
            project_index.save()


class Migration(migrations.Migration):
    dependencies = [
        ("posts", "0023_alter_post_hotness"),
        ("projects", "0019_alter_project_type"),
        ("questions", "0029_question_default_aggregation_method"),
    ]

    operations = [
        migrations.CreateModel(
            name="ProjectIndex",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now, editable=False
                    ),
                ),
                ("edited_at", models.DateTimeField(editable=False, null=True)),
                (
                    "type",
                    models.CharField(
                        choices=[("default", "Default"), ("multi_year", "Multi Year")],
                        default="default",
                        max_length=32,
                    ),
                ),
                (
                    "min_label",
                    models.CharField(
                        blank=True,
                        help_text="Label at the minimum end of the scale (left). Example: “Less democratic”",
                        max_length=200,
                    ),
                ),
                (
                    "max_label",
                    models.CharField(
                        blank=True,
                        help_text="Label at the maximum end of the scale (right). Example: “More democratic”",
                        max_length=200,
                    ),
                ),
                (
                    "increasing_is_good",
                    models.BooleanField(
                        default=True,
                        help_text="Color polarity: if on, higher values are good (green → right, red → left); if off, invert the colors",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="projectindexquestion",
            name="post",
            field=models.ForeignKey(
                help_text="Index Post",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="posts.post",
            ),
        ),
        migrations.AlterField(
            model_name="projectindexquestion",
            name="question",
            field=models.ForeignKey(
                help_text="Index Post",
                on_delete=django.db.models.deletion.CASCADE,
                to="questions.question",
            ),
        ),
        migrations.AlterField(
            model_name="projectindexquestion",
            name="weight",
            field=models.FloatField(
                help_text="Weight of the post within the index. If the post includes a group of questions, the same weight will be applied to all subquestions."
            ),
        ),
        migrations.AddField(
            model_name="project",
            name="index",
            field=models.OneToOneField(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="project",
                to="projects.projectindex",
            ),
        ),
        migrations.AddField(
            model_name="projectindexquestion",
            name="index",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="question_weights",
                to="projects.projectindex",
            ),
        ),
        migrations.RunPython(migrate_index_data, migrations.RunPython.noop),
        migrations.RemoveConstraint(
            model_name="projectindexquestion",
            name="projectindexquestion_unique_project_question",
        ),
        migrations.RemoveField(
            model_name="projectindexquestion",
            name="project",
        ),
        migrations.RemoveField(
            model_name="projectindexquestion",
            name="question",
        ),
        migrations.AlterField(
            model_name="projectindexquestion",
            name="index",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="question_weights",
                to="projects.projectindex",
            ),
        ),
        migrations.AlterField(
            model_name="projectindexquestion",
            name="post",
            field=models.ForeignKey(
                help_text="Index Post",
                on_delete=django.db.models.deletion.CASCADE,
                to="posts.post",
            ),
        ),
        migrations.AddConstraint(
            model_name="projectindexquestion",
            constraint=models.UniqueConstraint(
                fields=("index", "post"),
                name="projectindexquestion_unique_project_question",
            ),
        ),
    ]
