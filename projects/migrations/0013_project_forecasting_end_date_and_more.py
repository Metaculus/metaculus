# Generated by Django 5.1.8 on 2025-04-09 16:43

from django.db import migrations, models
from django.db.models import Q


def populate_project_forecasting_end_date(apps, schema_editor):
    """
    Populates Project.forecasting_end_date for all projects based on questions closure time
    """

    Project = apps.get_model("projects", "Project")
    Question = apps.get_model("questions", "Question")
    Post = apps.get_model("posts", "Post")
    projects = Project.objects.filter(close_date__isnull=False, type="tournament")

    for project in projects:
        forecasting_end_date = project.forecasting_end_date
        posts = Post.objects.filter(
            Q(default_project=project) | Q(projects=project),
            curation_status="approved",
        )

        questions = Question.objects.filter(
            Q(post__in=posts)
            | Q(group__post__in=posts)
            | Q(conditional_yes__post__in=posts)
        ).distinct("pk")

        for question in questions:
            scheduled_resolve_time = (
                question.actual_resolve_time or question.scheduled_resolve_time
            )

            if (
                question.scheduled_close_time <= project.close_date
                and scheduled_resolve_time <= project.close_date
                and (
                    not forecasting_end_date
                    or question.scheduled_close_time > forecasting_end_date
                )
            ):
                forecasting_end_date = question.scheduled_close_time

        project.forecasting_end_date = forecasting_end_date
        project.save(update_fields=["forecasting_end_date"])


class Migration(migrations.Migration):
    dependencies = [
        ("projects", "0012_project_is_automatically_translated"),
    ]

    operations = [
        migrations.AddField(
            model_name="project",
            name="forecasting_end_date",
            field=models.DateTimeField(
                blank=True,
                help_text="The date the last scored question that counts for the tournament closes.The date shown is the latest of the Forecasting end date and the latest question close date closing and resolving before the Close date.",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="project",
            name="close_date",
            field=models.DateTimeField(
                blank=True,
                help_text="The date the tournament wraps up and prizes will be paid. All questions that should be included in the leaderboard must close and resolve before this date. This is displayed on the front end as the “Winners announced date”",
                null=True,
            ),
        ),
        migrations.RunPython(
            populate_project_forecasting_end_date, migrations.RunPython.noop
        ),
    ]
