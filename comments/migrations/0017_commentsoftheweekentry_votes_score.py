# Generated by Django 5.1.9 on 2025-08-28 14:38

from datetime import timedelta

from django.db import migrations, models
from django.db.models import (
    Sum,
    F,
    OuterRef,
    Subquery,
    IntegerField,
    Count,
)
from django.db.models.functions import Coalesce


def backfill_votes_score(apps, schema_editor):
    # Historical models
    CommentsOfTheWeekEntry = apps.get_model("comments", "CommentsOfTheWeekEntry")
    CommentVote = apps.get_model("comments", "CommentVote")
    KeyFactorVote = apps.get_model("comments", "KeyFactorVote")
    ChangedMyMindEntry = apps.get_model("comments", "ChangedMyMindEntry")

    qs = CommentsOfTheWeekEntry.objects.annotate(
        _votes_score=Coalesce(
            Subquery(
                CommentVote.objects.filter(
                    comment=OuterRef("comment_id"),
                    created_at__lt=F("comment__created_at") + timedelta(days=7),
                )
                .values("comment")
                .annotate(total=Sum("direction"))
                .values("total")[:1],
                output_field=IntegerField(),
            ),
            0,
            output_field=IntegerField(),
        ),
        _changed_my_mind_count=Coalesce(
            Subquery(
                ChangedMyMindEntry.objects.filter(
                    comment=OuterRef("comment_id"),
                    created_at__lt=F("comment__created_at") + timedelta(days=7),
                )
                .values("comment")
                .annotate(total=Count("id"))
                .values("total")[:1],
                output_field=IntegerField(),
            ),
            0,
            output_field=IntegerField(),
        ),
        # TODO: double-check this one!
        _key_factor_votes_count=Coalesce(
            Subquery(
                KeyFactorVote.objects.filter(
                    key_factor__comment_id=OuterRef("comment_id"),
                    created_at__lt=(
                        F("key_factor__comment__created_at") + timedelta(days=7)
                    ),
                )
                .values("key_factor__comment")
                .annotate(total=Count("id"))
                .values("total")[:1],
                output_field=IntegerField(),
            ),
            0,
            output_field=IntegerField(),
        ),
    )

    # Updating data
    qs.update(
        votes_score=F("_votes_score"),
        changed_my_mind_count=F("_changed_my_mind_count"),
        key_factor_votes_count=F("_key_factor_votes_count"),
    )


class Migration(migrations.Migration):
    dependencies = [
        ("comments", "0016_commentsoftheweeknotification"),
    ]

    operations = [
        migrations.AddField(
            model_name="commentsoftheweekentry",
            name="votes_score",
            field=models.IntegerField(db_index=True, default=0, editable=False),
        ),
        migrations.AddField(
            model_name="commentsoftheweekentry",
            name="changed_my_mind_count",
            field=models.PositiveIntegerField(db_index=True, default=0, editable=False),
        ),
        migrations.AddField(
            model_name="commentsoftheweekentry",
            name="key_factor_votes_count",
            field=models.PositiveIntegerField(db_index=True, default=0, editable=False),
        ),
        migrations.RunPython(
            backfill_votes_score, reverse_code=migrations.RunPython.noop
        ),
    ]
