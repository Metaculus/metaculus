# Generated by Django 5.1.10 on 2025-10-02 19:31
import logging

from django.db import migrations

logger = logging.getLogger(__name__)


def migrate_strength_vote_score(score: int):
    # Converting (-5, -3, -2, 0, 2, 3, 5) scale to (0, 1, 2, 5)
    score = abs(score)

    return {
        # No
        0: 0,
        # Low
        2: 1,
        # Medium
        3: 2,
        # Heigh
        5: 5,
    }[score]


def votes_migration(apps, schema_editor):
    KeyFactorVote = apps.get_model("comments", "KeyFactorVote")
    KeyFactor = apps.get_model("comments", "KeyFactor")
    KeyFactorDriver = apps.get_model("comments", "KeyFactorDriver")

    # Drop unused a_updown votes
    KeyFactorVote.objects.filter(type="a_updown").delete()

    # Migrate other votes
    key_factors = KeyFactor.objects.prefetch_related("votes").all()
    update_votes = []
    update_drivers = []

    for kf in key_factors:
        votes = kf.votes.all()

        direction = sum([v.score for v in votes])

        if direction == 0:
            logger.info(f"KeyFactor {kf.id} has direction = 0")
        else:
            # Update driver direction
            kf.driver.impact_direction = "increase" if direction > 0 else "decrease"
            update_drivers.append(kf)

        logger.info(f"KeyFactor {kf.id} has direction = {direction}")

        for vote in votes:
            # Update vote type
            vote.vote_type = "strength"

            if (
                # TODO: double-check 0 case
                direction == 0
                or (direction > 0 and vote.score < 0)
                or (direction < 0 and vote.score > 0)
            ):
                # votes that disagree with the new direction get strength 0
                vote.score = 0
            else:
                # votes that agree keep their abs strength,
                # but are converted to the (0, 1, 2, 5) scale
                vote.score = migrate_strength_vote_score(vote.score)

            update_votes.append(update_votes)

    logger.info(f"Updating {len(update_votes)} votes")
    KeyFactorVote.objects.bulk_update(update_votes, ["score"])
    logger.info(f"Updating {len(update_drivers)} drivers")
    KeyFactorDriver.objects.bulk_update(
        update_drivers, ["impact_direction", "vote_type"]
    )


class Migration(migrations.Migration):
    dependencies = [
        ("comments", "0019_keyfactors_refactor"),
    ]

    operations = [
        migrations.RunPython(votes_migration, reverse_code=migrations.RunPython.noop),
    ]
