# Generated by Django 5.1.1 on 2024-09-17 15:10

import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("questions", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Leaderboard",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now, editable=False
                    ),
                ),
                (
                    "edited_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now, editable=False, null=True
                    ),
                ),
                ("name", models.CharField(max_length=200, null=True)),
                (
                    "score_type",
                    models.CharField(
                        choices=[
                            (
                                "relative_legacy_tournament",
                                "Relative Legacy Tournament",
                            ),
                            ("peer_global", "Peer Global"),
                            ("peer_global_legacy", "Peer Global Legacy"),
                            ("peer_tournament", "Peer Tournament"),
                            ("spot_peer_tournament", "Spot Peer Tournament"),
                            ("baseline_global", "Baseline Global"),
                            ("comment_insight", "Comment Insight"),
                            ("question_writing", "Question Writing"),
                        ],
                        max_length=200,
                    ),
                ),
                ("start_time", models.DateTimeField(null=True)),
                ("end_time", models.DateTimeField(null=True)),
                ("finalize_time", models.DateTimeField(null=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="LeaderboardEntry",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now, editable=False
                    ),
                ),
                (
                    "edited_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now, editable=False, null=True
                    ),
                ),
                (
                    "aggregation_method",
                    models.CharField(
                        choices=[
                            ("recency_weighted", "Recency Weighted"),
                            ("unweighted", "Unweighted"),
                            ("single_aggregation", "Single Aggregation"),
                            ("metaculus_prediction", "Metaculus Prediction"),
                        ],
                        max_length=200,
                        null=True,
                    ),
                ),
                ("score", models.FloatField()),
                ("take", models.FloatField(null=True)),
                ("rank", models.IntegerField(null=True)),
                ("excluded", models.BooleanField(default=False)),
                (
                    "medal",
                    models.CharField(
                        choices=[
                            ("gold", "Gold"),
                            ("silver", "Silver"),
                            ("bronze", "Bronze"),
                        ],
                        max_length=200,
                        null=True,
                    ),
                ),
                ("percent_prize", models.FloatField(null=True)),
                ("prize", models.FloatField(null=True)),
                ("coverage", models.FloatField(null=True)),
                ("contribution_count", models.IntegerField(default=0)),
                ("calculated_on", models.DateTimeField(auto_now=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="MedalExclusionRecord",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("start_time", models.DateTimeField()),
                ("end_time", models.DateTimeField(null=True)),
                (
                    "exclusion_type",
                    models.CharField(
                        choices=[
                            ("staff", "Staff"),
                            ("project_owner", "Project Owner"),
                        ],
                        max_length=200,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Score",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now, editable=False
                    ),
                ),
                (
                    "edited_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now, editable=False, null=True
                    ),
                ),
                (
                    "aggregation_method",
                    models.CharField(
                        choices=[
                            ("recency_weighted", "Recency Weighted"),
                            ("unweighted", "Unweighted"),
                            ("single_aggregation", "Single Aggregation"),
                            ("metaculus_prediction", "Metaculus Prediction"),
                        ],
                        max_length=200,
                        null=True,
                    ),
                ),
                ("score", models.FloatField()),
                ("coverage", models.FloatField(default=0)),
                (
                    "score_type",
                    models.CharField(
                        choices=[
                            ("relative_legacy", "Relative Legacy"),
                            ("peer", "Peer"),
                            ("baseline", "Baseline"),
                            ("spot_peer", "Spot Peer"),
                            ("spot_baseline", "Spot Baseline"),
                        ],
                        max_length=200,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="UserWeight",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now, editable=False
                    ),
                ),
                (
                    "edited_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now, editable=False, null=True
                    ),
                ),
                ("calculated_on", models.DateTimeField(auto_now_add=True)),
                ("weight", models.FloatField(default=1)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ArchivedScore",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now, editable=False
                    ),
                ),
                (
                    "edited_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now, editable=False, null=True
                    ),
                ),
                (
                    "aggregation_method",
                    models.CharField(
                        choices=[
                            ("recency_weighted", "Recency Weighted"),
                            ("unweighted", "Unweighted"),
                            ("single_aggregation", "Single Aggregation"),
                            ("metaculus_prediction", "Metaculus Prediction"),
                        ],
                        max_length=200,
                        null=True,
                    ),
                ),
                ("score", models.FloatField()),
                ("coverage", models.FloatField(default=0)),
                (
                    "score_type",
                    models.CharField(
                        choices=[("relative_legacy", "Relative Legacy")], max_length=200
                    ),
                ),
                (
                    "question",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="archived_scores",
                        to="questions.question",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
    ]
